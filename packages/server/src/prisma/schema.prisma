generator client {
  provider = "prisma-client-js"
  previewFeatures = ["fullTextSearchPostgres"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserPermission {
  USER
  ADMIN_ALL
}

enum OrderStatus {
  PENDING
  SUCCEEDED
  CANCELLED
}

model User {
  id            String            @id @default(uuid())
  email         String            @unique
  password      String
  name          String            @default("")
  
  productLikes  ProductLike[]
  permissions   UserPermission[]  @default([USER])
  cart          Cart?  
  // orders        Order[]         

  createAt      DateTime          @default(now())
  updateAt      DateTime?         @updatedAt
}

model Product {
  id            String          @id @default(uuid())
  serialNumber  Int             @unique @default(autoincrement())
  name          String          @unique
  description   String
  price         Float
  count         Int
  imageUrl      String?

  likes         ProductLike[] 
  items         CartItem[]
  
  category      Category        @relation(fields: [categoryId], references: [id])
  categoryId    String

  createAt      DateTime        @default(now())
  updatedAt     DateTime?       @updatedAt
}

model Category {
  id            String      @id @default(uuid())
  nameRu        String      @unique
  nameEn        String      @unique
  products      Product[]  

  createAt      DateTime    @default(now())
  updateAt      DateTime?   @updatedAt
}

model ProductLike {
  id          String    @id @default(uuid())
  createdAt   DateTime  @default(now())
  
  product     Product   @relation(fields: [productId], references: [id])
  productId   String
  
  user        User      @relation(fields: [userId], references: [id])
  userId      String

  @@unique([productId, userId])
}

model Cart {
  id          String      @id @default(uuid())
  totalAmount Decimal     @default(0)

  user        User        @relation(fields: [userId], references: [id])
  userId      String      @unique

  items       CartItem[]

  createAt    DateTime    @default(now())
  updateAt    DateTime?   @updatedAt
}

model CartItem {
  id          String      @id @default(uuid())
  quantity    Int

  cart        Cart        @relation(fields: [cartId], references: [id])
  cartId      String

  product     Product     @relation(fields: [productId], references: [id])
  productId   String

  // order        Order      @relation(fields: [orderId], references: [id])
  // orderId      String

  createAt    DateTime    @default(now())
  updateAt    DateTime?   @updatedAt
}

// model Order {
//   id          String      @id @default(uuid())
//   totalAmount Decimal     @default(0)
//   status      OrderStatus
//   paymentId   String?

//   productCard CartItem[]

//   user        User        @relation(fields: [userId], references: [id])
//   userId      String      @unique

//   createAt    DateTime    @default(now())
//   updateAt    DateTime?   @updatedAt
// }
